#!/bin/zsh

# This was written by Copilot.

function timed-say() {
    # Start timing
    local start=$EPOCHREALTIME

    # Run the command
    eval "$@"
    local return_status=$?

    # End timing
    local end=$EPOCHREALTIME

    # Calculate duration with exactly 3 decimal places
    local duration
    duration=$(printf "%.3f" $(( end - start )))

    # Split into seconds and milliseconds
    local seconds=${duration%.*}
    local ms=${duration#*.}

    # Calculate hours, minutes, remaining seconds
    local hours=$(( seconds / 3600 ))
    local minutes=$(( (seconds % 3600) / 60 ))
    seconds=$(( seconds % 60 ))

    # Format milliseconds as individual digits
    local ms_formatted
    ms_formatted=$(echo $ms | sed 's/\(.\)/\1 /g' | sed 's/ $//')

    # Build the duration string
    local duration_str=""
    [[ $hours -gt 0 ]] && duration_str+="$hours hours "
    [[ $minutes -gt 0 ]] && duration_str+="$minutes minutes "
    if [[ $seconds -gt 0 || $ms != "000" ]]; then
        if [[ $ms != "000" ]]; then
            duration_str+="${seconds:-zero} point ${ms_formatted} seconds"
        else
            duration_str+="${seconds:-zero} seconds"
        fi
    fi

    # Trim any extra spaces
    duration_str="${duration_str% }"

    # If duration is zero with no milliseconds, just say "zero seconds"
    [[ -z "$duration_str" ]] && duration_str="zero seconds"

    # Build the complete message
    local message
    if (( return_status == 0 )); then
        message="The command succeeded in $duration_str."
    else
        message="The command failed in $duration_str."
    fi

    # Speak the message
    (say "$message" &) >/dev/null 2>&1
}

compdef _precommand timed-say
